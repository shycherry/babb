var $ = global.$
var Backbone = global.Backbone
var _ = global._
var BABB = global.BABB

var Sniffer = require('sniffer')
var ItemsCollectionView = require('itemsCollection').ItemsCollectionView

var Rom = Backbone.Model.extend({
  defaults: {    
    id : "x",
    title : "Rom title",
    path : "/default/path",    
  },
  
  initialize: function Rom(){
    console.log('Rom constructor')
    this.set('id', this.cid)
  },
  
  toString: function(){
    return this.get('title')+' '+this.get('path')
  }
})

var RomsCollection = Backbone.Collection.extend({
  model: Rom,
  initialize: function(){
    console.log('RomsCollection constructor')
  }
})

var RomsCollectionView = ItemsCollectionView.extend({
  itemsCollection : new RomsCollection(),  

  initialize : function() {
    console.log('RomsCollectionView initialize')
    this.reset()
    var self = this    
    
    this.doBindings()
    this.$el.on("click", ".rom", function(event){
      self.setSelected(self.itemsCollection.get(this.id))
      event.stopPropagation()
    })    
    this.$el.on("dblclick", ".rom", function(){
      self.validSelected()
    })    
  },

  doSniff: function(parPaths, parRomsProvider){
    this.reset()
    this.romsProvider = parRomsProvider
    Sniffer.stopSniff(this.currentPathsToSniff)
    Sniffer.sniff(parPaths, this.onSniffed)
    this.currentPathsToSniff = parPaths
  },

  getCurrentPathsToSniff : function(){
    return this.currentPathsToSniff
  },

  reset : function(){
    this.template = _.template( $(BABB.RomsConfig.romsCollectionTemplateId).html() )
    this.itemsCollection.reset()
    this.setSelected(null)
  },

  onSniffed : function(parReport){
    if(parReport.isUpdate){
      this.doSniff(this.currentPathsToSniff, this.romsProvider)
    }else{
      this.romsProvider(parReport, this.itemsCollection)
    }
  },

  onSelectedChange : function (iRom){
    this.$el.children('.focus').removeClass('focus')
    if(iRom){
      this.temporaryFocusContainer()
      
      //highlight
      $('#'+iRom.id).addClass('focus')
    }

    this.trigger('selectionChanged', iRom)
  },

  toString : function() {    
    return 'RomsCollectionView'
  }
})

exports.Rom = Rom
exports.RomsCollection = RomsCollection
exports.RomsCollectionView = RomsCollectionView