var $ = global.$
var _ = global._
var Backbone = global.Backbone
var Fs = require('fs')

var CoverflowView = Backbone.View.extend({
  initialize : function(){
    if(!this.template){
      this.template = _.template(Fs.readFileSync(__dirname+'/default-template.html').toString())
    }
    this.selected = this.collection.at(0)
    
    this.createDOM()
    this.initBindings()
  },
  
  initBindings : function(){
    _.bindAll(this, 'render')
    this.on('selectedChange', this.render)
  },
  
  select : function(iIndex){
    if(iIndex >= 0 && iIndex < this.collection.length){
      var newSelected = this.collection.at(iIndex)
      if(newSelected != this.selected){      
        this.selected = newSelected
        this.trigger('selectedChange')
      }
    }
  },
  
  createDOM : function(){
    this.divTray = window.document.createElement('div')
    this.divTray.classList.add('coverflow-tray')
    
    var self = this    
    this.collection.forEach(function(item){
      var div = window.document.createElement('div')
      div.innerHTML = self.template({item:item})
      div.classList.add('coverflow-cell')            
      $(self.divTray).append(div)
    })
    
    this.$el.append(this.divTray)
  },
  
  render : function(){
    var self = this
    var indexSelected = this.collection.indexOf(this.selected)
    for(var i = 0; i< this.divTray.children.length; i++){
      if(i == indexSelected){
        this.$(this.divTray.children[i]).css('-webkit-transform','rotateY(0)')        
      }else{
        this.$(this.divTray.children[i]).css('-webkit-transform','rotateY(-70deg)')        
      }      
    }
  }
})

exports.CoverflowView = CoverflowView