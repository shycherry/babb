var $ = global.$
var _ = global._
var Backbone = global.Backbone
var Fs = require('fs')

var CoverflowModel = Backbone.Model.extend({
  defaults:{
    width:480,
    height:270,
    cellWidth:180,
    cellHeight:180,
    selectedIndex:0,
    zUnselected:-170,
    perspective:250,
    coverGap:40,
    coverOffset:130,    
    circularSelection:false,
    collection:new Backbone.Collection    
  }
})

var CoverflowView = Backbone.View.extend({

  initialize : function(){
    if(!this.template){
      this.template = _.template(Fs.readFileSync(__dirname+'/default-template.html').toString())
    }
        
    this.initFromModel()
    this.createDOM()
    this.initBindings()
  },
  
  initFromModel : function(){
    this.collection = this.model.get('collection')
    this.circularSelection = this.model.get('circularSelection')
    this.selectedIndex = this.model.get('selectedIndex')
    this.previousSelectedIndex = this.selectedIndex
    this.cellWidth = this.model.get('cellWidth')
    this.cellHeight = this.model.get('cellHeight')
    this.zUnselected = this.model.get('zUnselected')
    this.height = this.model.get('height')
    this.width = this.model.get('width')
    this.perspective = this.model.get('perspective')
    this.coverGap = this.model.get('coverGap')
    this.coverOffset = this.model.get('coverOffset')
  },
  
  initBindings : function(){
    _.bindAll(this, 'render')    
    this.on('selectedChange', this.render)    
  },
  
  add : function(iItem){
    this.collection.add(iItem)
  },
  
  select : function(iIndex){
    if(iIndex >= 0 && iIndex < this.collection.length){
      this.previousSelectedIndex = this.selectedIndex
      this.selectedIndex = iIndex      
      if(this.selectedIndex != this.previousSelectedIndex){        
        if(Math.abs(this.selectedIndex - this.previousSelectedIndex) >1){
          this.needFullRender = true
        }

        this.trigger('selectedChange')
      }
    }
  },
  
  Next : function(){    
    if(this.selectedIndex < 0){
      this.select(0)
    }else{      
      this.select( this.getNextIndex(this.selectedIndex) )
    }
  },

  Previous : function(){    
    if(this.selected < 0){
      this.select(0)
    }else{      
      this.select( this.getPreviousIndex(this.selectedIndex) )
    }    
  },
  
  getNextIndex : function(baseIndex){
    if(this.circularSelection){
      return (baseIndex + 1) % this.collection.size()
    }else{
      return this.selectedIndex+1
    }
  },
  
  getPreviousIndex : function(baseIndex){
    if(this.circularSelection){
      return (baseIndex + this.collection.size() - 1) % this.collection.size() 
    }else{
      return this.selectedIndex-1
    }
  },  
  
  createDOM : function(){
    this.$divWrap = $(window.document.createElement('div'))
    this.$divTray = $(window.document.createElement('div'))
    this.$divWrap.addClass('coverflow-wrap')
    this.$divTray.addClass('coverflow-tray')
    this.$divWrap.append(this.$divTray)
    this.$divWrap.css('-webkit-perspective', this.perspective+'px')
    this.$divWrap.css('left', (this.width/2)+'px')
    this.$divWrap.css('top', (this.height/2)+'px')
    this.$el.append(this.$divWrap)
    this.$el.addClass('coverflow')
    this.$el.css('width', this.width)
    this.$el.css('height', this.height)
    this.createDOMCollection()
  },
  
  
  createDOMCollection: function(){
    var self = this    
    this.$divTray.empty()
    this.collection.forEach(function(item){
      var $div = $(window.document.createElement('div'))
      $div.css('height',self.cellHeight+'px')
      $div.css('width',self.cellWidth+'px')
      $div.css('left',-self.cellWidth/2+'px')
      $div.css('top',-self.cellHeight/2+'px')
      $div.html(self.template({item:item}))
      $div.addClass('coverflow-cell')            
      self.$divTray.append($div)
    })
    this.needFullRender = true
  },
  
  renderFull : function(){
    this.$divTray.css('-webkit-transform', 'translate3d(-'+(this.coverGap*this.selectedIndex)+'px , 0px, 0px)')
    var collectionLength = this.collection.length            
    for(var i = 0; i< collectionLength; i++){
      var element = $(this.$divTray.children()[i])
      if(i< this.selectedIndex){
        element.css('-webkit-transform',' translate3d('+(-this.coverOffset+(i*this.coverGap))+'px, 0px, '+this.zUnselected+'px) rotateY(70deg)')
      }else if(i == this.selectedIndex){        
        element.css('-webkit-transform','translate3d('+this.coverGap*i+'px,0px,0px)')
      }else if(i > this.selectedIndex){        
        element.css('-webkit-transform','translate3d('+(this.coverOffset+(i*this.coverGap))+'px, 0px, '+this.zUnselected+'px) rotateY(-70deg)')
      }      
    }
    
    this.needFullRender = false
  },
  
  renderFast : function(){  
    this.$divTray.css('-webkit-transform', 'translate3d(-'+(this.coverGap*this.selectedIndex)+'px , 0px, 0px)')
    var selectedElement = $(this.$divTray.children()[this.selectedIndex])
    selectedElement.css('-webkit-transform','translate3d('+this.coverGap*this.selectedIndex+'px,0px,0px)')    
    
    var previousSelectedElement = $(this.$divTray.children()[this.previousSelectedIndex])
    if(this.previousSelectedIndex < this.selectedIndex){
      previousSelectedElement.css('-webkit-transform',' translate3d('+(-this.coverOffset+(this.previousSelectedIndex*this.coverGap))+'px, 0px, '+this.zUnselected+'px) rotateY(70deg)')
    }else if(this.previousSelectedIndex > this.selectedIndex){
      previousSelectedElement.css('-webkit-transform','translate3d('+(this.coverOffset+(this.previousSelectedIndex*this.coverGap))+'px, 0px, '+this.zUnselected+'px) rotateY(-70deg)')
    }
  }, 
  
  render : function(){
    if(this.needFullRender){
      this.renderFull()
    }else{
      this.renderFast()
    }
  }
})

exports.CoverflowModel = CoverflowModel
exports.CoverflowView = CoverflowView