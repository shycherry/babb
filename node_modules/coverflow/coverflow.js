var $ = global.$
var _ = global._
var Backbone = global.Backbone
var Fs = require('fs')

var CoverflowModel = Backbone.Model.extend({
  defaults:{
    width:480,
    height:270,
    cellWidth:180,
    cellHeight:180,
    selected:0,
    collection:new Backbone.Collection
  }
})

var CoverflowView = Backbone.View.extend({

  initialize : function(){
    if(!this.template){
      this.template = _.template(Fs.readFileSync(__dirname+'/default-template.html').toString())
    }
        
    this.initFromModel()
    this.createDOM()
    this.initBindings()
  },
  
  initFromModel : function(){
    this.collection = this.model.get('collection')    
    this.selected = this.collection.at(this.model.get('selected'))
    this.cellWidth = this.model.get('cellWidth')
    this.cellHeight = this.model.get('cellHeight')
    this.height = this.model.get('height')
    this.width = this.model.get('width')
  },
  
  initBindings : function(){
    _.bindAll(this, 'render')    
    this.on('selectedChange', this.render)    
  },
  
  select : function(iIndex){
    if(iIndex >= 0 && iIndex < this.collection.length){
      var newSelected = this.collection.at(iIndex)
      if(newSelected != this.selected){      
        this.selected = newSelected
        this.trigger('selectedChange')
      }
    }
  },
  
  createDOM : function(){
    this.divWrap = window.document.createElement('div')
    this.divTray = window.document.createElement('div')
    this.divWrap.classList.add('coverflow-wrap')
    this.divTray.classList.add('coverflow-tray')
    
    var self = this    
    this.collection.forEach(function(item){
      var div = window.document.createElement('div')
      div.innerHTML = self.template({item:item})
      div.classList.add('coverflow-cell')            
      $(self.divTray).append(div)
    })
    $(this.divWrap).append(this.divTray)
    this.$el.append(this.divWrap)
    this.$el.addClass('coverflow')
    this.$el.css('width', this.width)
    this.$el.css('height', this.height)
  },
  
  render : function(){
    var self = this
    var indexSelected = this.collection.indexOf(this.selected)
    var collectionLength = this.collection.length    
        
    this.$(this.divTray).css('-webkit-transform', 'translate3d(-'+(40*indexSelected)+'px , 0px, 0px)')
    for(var i = 0; i< collectionLength; i++){
      this.$(this.divTray.children[i]).removeAttr('style')
      this.$(this.divTray.children[i]).css('height',this.cellHeight+'px');
      this.$(this.divTray.children[i]).css('width',this.cellWidth+'px');
      this.$(this.divTray.children[i]).css('left','-'+this.cellWidth/2+'px');      
      if(i< indexSelected){
        this.$(this.divTray.children[i]).css('-webkit-transform','rotateY(70deg) translate3d(-'+((40*collectionLength)-(40*i)-this.cellWidth)+'px, 0px, -170px)')
      }else if(i == indexSelected){
        this.$(this.divTray.children[i]).css('-webkit-transform','translate3d('+40*(i)+'px,0px,0px)')
      }else if(i > indexSelected){
        this.$(this.divTray.children[i]).css('-webkit-transform','rotateY(-70deg) translate3d('+(40*(collectionLength-(collectionLength -i)))+'px, 0px, -170px)')
      }      
    }
  }
})

exports.CoverflowModel = CoverflowModel
exports.CoverflowView = CoverflowView