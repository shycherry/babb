var $ = global.$
var Backbone = global.Backbone
var _ = global._
var BABB = global.BABB

var ItemsCollectionView = require('itemsCollection').ItemsCollectionView
var BandanaView = require('bandana').BandanaView
var RomsCollectionView = require('roms').RomsCollectionView
var PlatformsCollectionView = require('platforms').PlatformsCollectionView

var romsCollectionView = new RomsCollectionView()
var platformsCollectionView = new PlatformsCollectionView()
var bandanaView = new BandanaView()

var currentView = null
changeCurrentView(platformsCollectionView)

function changeCurrentView(parNewCurrentView){
  if(parNewCurrentView && parNewCurrentView != currentView){
    if(currentView){
      currentView.unfocusContainer()
    }
    currentView = parNewCurrentView
    currentView.temporaryFocusContainer()
    if(currentView == platformsCollectionView){
      $('#dynabody').removeClass('parallax')
      $(BABB.RomsConfig.romsContainerId).addClass('hidden')
      $(BABB.PlatformsConfig.platformsContainerId).removeClass('hidden')
    }
    else if(currentView == romsCollectionView){
      $('#dynabody').addClass('parallax')
      $(BABB.PlatformsConfig.platformsContainerId).addClass('hidden')
      $(BABB.RomsConfig.romsContainerId).removeClass('hidden')
    }
  }else if(currentView){
    currentView.temporaryFocusContainer()
  }
}

$('body').on("click", function(event){
  if(currentView == platformsCollectionView){
    currentView.validSelected()
  }
  else if(currentView == romsCollectionView){
    currentView.back()
  }
})

$('body').on("mousewheel", function(event, delta){

  var delta = event.originalEvent.wheelDelta
  if(delta < 0){
    currentView.selectNext()
  }else{
    currentView.selectPrevious()
  }

})

platformsCollectionView.selectCallback = function(iItem){
  if(iItem){
    changeCurrentView(platformsCollectionView)
  }
}

romsCollectionView.selectCallback = function(){
  console.log('roms select callback')
  if(romsCollectionView.getSelected()){
    changeCurrentView(romsCollectionView)
  }
}

platformsCollectionView.validCallback = function(iItem){
  if( ! iItem.isAvailable()){
    BABB.EventEmitter.trigger('error', iItem+' is not available')
    return
  }

  if(iItem.getRomsPaths() != romsCollectionView.getCurrentPathsToSniff()){
    romsCollectionView.doSniff(
      iItem.getRomsPaths(),
      iItem.getRomsProvider()
    )
  }

  changeCurrentView(romsCollectionView)
  if( ! currentView.getSelected()){
    currentView.selectNext()
  }
}

platformsCollectionView.backCallback = function(){
  changeCurrentView(platformsCollectionView)
}

romsCollectionView.validCallback = function(parRom){
  if(parRom){
    if($(BABB.RomsConfig.romsContainerId).hasClass('focus')){
      var selectedItem = platformsCollectionView.getSelected()
      if(selectedItem){
        selectedItem.runRom(parRom)
      }
    }else{
      changeCurrentView(romsCollectionView)
    }
  }else{
    romsCollectionView.selectNext()
  }
}

romsCollectionView.backCallback = function(){
  changeCurrentView(platformsCollectionView)
}

global.window.document.onkeydown = applyKey
function applyKey(keyEvent){
  if(keyEvent.keyCode == BABB.Controls.up){
    currentView.selectPrevious()
  }
  if(keyEvent.keyCode == BABB.Controls.down){
    currentView.selectNext()
  }
  if(keyEvent.keyCode == BABB.Controls.valid){
    currentView.validSelected()
  }
  if(keyEvent.keyCode == BABB.Controls.back){
    currentView.back()
  }
}

function start(){
  platformsCollectionView.doSniff()
}

exports.start = start
