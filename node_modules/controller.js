var $ = global.$
var Backbone = global.Backbone
var _ = global._
var BABB = global.BABB

var ItemsCollectionView = require('itemsCollection').ItemsCollectionView
var BandanaView = require('bandana').BandanaView
var RomsCollectionView = require('roms').RomsCollectionView
var PlatformsCollectionView = require('platforms').PlatformsCollectionView

exports.FrontendView = Backbone.View.extend({
  
  initialize : function(){        
    this.bandanaView = new BandanaView()
    this.platformsCollectionView = new PlatformsCollectionView()    
    this.romsCollectionView = new RomsCollectionView()
    this.changeCurrentView(this.platformsCollectionView)
    this.initBindings()
  },
  
  initBindings : function(){
    _.bindAll(this, 'changeCurrentView')
    
    var self = this
    
    $('body').on("click", function(event){
      if(self.currentView == self.platformsCollectionView){
        self.currentView.validSelected()
      }
      else if(self.currentView == self.romsCollectionView){
        self.currentView.back()
      }
    })

    $('body').on("mousewheel", function(event, delta){

      var delta = event.originalEvent.wheelDelta
      if(delta < 0){
        self.currentView.selectNext()
      }else{
        self.currentView.selectPrevious()
      }

    })    
    
    this.platformsCollectionView.selectCallback = function(iItem){
      if(iItem){
        self.changeCurrentView(self.platformsCollectionView)
      }
    }

    this.romsCollectionView.selectCallback = function(){
      console.log('roms select callback')
      if(self.romsCollectionView.getSelected()){
        self.changeCurrentView(self.romsCollectionView)
      }
    }

    this.platformsCollectionView.validCallback = function(iItem){
      if( ! iItem.isAvailable()){
        BABB.EventEmitter.trigger('error', iItem+' is not available')
        return
      }

      if(iItem.getRomsPaths() != self.romsCollectionView.getCurrentPathsToSniff()){
        self.romsCollectionView.doSniff(
          iItem.getRomsPaths(),
          iItem.getRomsProvider()
        )
      }

      self.changeCurrentView(self.romsCollectionView)
      if( ! self.currentView.getSelected()){
        self.currentView.selectNext()
      }
    }

    this.platformsCollectionView.backCallback = function(){
      self.changeCurrentView(self.platformsCollectionView)
    }

    this.romsCollectionView.validCallback = function(parRom){
      if(parRom){
        if($(BABB.RomsConfig.romsContainerId).hasClass('focus')){
          var selectedItem = self.platformsCollectionView.getSelected()
          if(selectedItem){
            selectedItem.runRom(parRom)
          }
        }else{
          self.changeCurrentView(self.romsCollectionView)
        }
      }else{
        self.romsCollectionView.selectNext()
      }
    }

    this.romsCollectionView.backCallback = function(){
      self.changeCurrentView(self.platformsCollectionView)
    }
    
    global.window.document.onkeydown = function (keyEvent){
      if(keyEvent.keyCode == BABB.Controls.up){
        self.currentView.selectPrevious()
      }
      if(keyEvent.keyCode == BABB.Controls.down){
        self.currentView.selectNext()
      }
      if(keyEvent.keyCode == BABB.Controls.valid){
        self.currentView.validSelected()
      }
      if(keyEvent.keyCode == BABB.Controls.back){
        self.currentView.back()
      }
    }
  },
  
  changeCurrentView : function(iNewCurrentView){
    if(iNewCurrentView && iNewCurrentView != this.currentView){
      if(this.currentView){
        this.currentView.unfocusContainer()
      }
      this.currentView = iNewCurrentView
      this.currentView.temporaryFocusContainer()
      if(this.currentView == this.platformsCollectionView){
        $('#dynabody').removeClass('parallax')
        $(BABB.RomsConfig.romsContainerId).addClass('hidden')
        $(BABB.PlatformsConfig.platformsContainerId).removeClass('hidden')
      }
      else if(this.currentView == this.romsCollectionView){
        $('#dynabody').addClass('parallax')
        $(BABB.PlatformsConfig.platformsContainerId).addClass('hidden')
        $(BABB.RomsConfig.romsContainerId).removeClass('hidden')
      }
    }else if(this.currentView){
      this.currentView.temporaryFocusContainer()
    }
  }
})


