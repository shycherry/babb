var $ = global.$
var Backbone = global.Backbone
var _ = global._
var BABB = global.BABB

var Path = require('path')
var Fs = require('fs')
var Sniffer = require('sniffer')
var Roms = require('roms')

var ItemsCollectionView = require('itemsCollection').ItemsCollectionView

var Platform = Backbone.Model.extend({
  defaults: {    
    id : "x",
    name : "unammed platform",
    path : "/default/path",
  },
  
  platformModule : null,
  
  initialize: function Platform(){
    console.log('Platform constructor')
    this.set('id', this.cid)
    this.loadModule()
    
    if(this.platformModule.getName){
      this.set('name', this.platformModule.getName())
    }
  },

  loadModule : function(){    
    var modulePath = Path.normalize(this.get('path')+'/platform.js')
    if(Fs.existsSync(modulePath)){    
      this.platformModule = require('../'+modulePath)
    }
    return this.platformModule
  },
  
  getLogoPath : function(){
    if(this.platformModule.getLogoPath){
      return this.platformModule.getLogoPath()
    }
  },
  
  getRomsPaths : function(){
    if(this.platformModule.getRomsPaths){
      return this.platformModule.getRomsPaths()
    }
    return []
  },
  
  getRomsProvider: function(){
    if(this.platformModule.romsProvider){
      return this.platformModule.romsProvider
    }
    return this.defaultRomsProvider
  },
  
  defaultRomsProvider : function(parReport, oRomsCollection){  
    var FilenamesFilter = global.BABB.Libs.FilenamesFilter  
    var filteredFilesMap = new FilenamesFilter(parReport)        
        .onlyKeepBasename()
        .removeExtensions()
        .get()

    for(var locPath in filteredFilesMap){
      var rom = new Roms.Rom({
        title : filteredFilesMap[locPath],
        path : locPath
      })    
      oRomsCollection.add(rom)
    }
    
  },
  
  runRom : function (parRom){    
    if(this.platformModule.runRom){
      this.platformModule.runRom(parRom)
    }else{
      console.log('no runRom method defined for '+this)
    }
  },
  
  isAvailable : function (){
    if(this.platformModule.isAvailable){
      return this.platformModule.isAvailable()
    }
    return true;
  },
  
  toString: function(){
    return this.get('name')+' ('+this.get('path')+')'
  }
})

var PlatformsCollection = Backbone.Collection.extend({
  model: Platform,
  initialize: function(){
    console.log('PlatformsCollection constructor')    
  }
})

var PlatformsCollectionView = ItemsCollectionView.extend({
	itemsCollection : new PlatformsCollection(),		
	
  initialize : function() {
    console.log('PlatformsCollectionView initialize')    
    this.template = _.template( $(BABB.PlatformsConfig.platformsCollectionTemplateId).html() )
    this.doBindings()
    this.additionalBindings()        
    this.doSniff()
	},
  
  additionalBindings : function(){
    var self = this    
    this.$el.on("click", ".platform", function(event){
      self.setSelected(self.itemsCollection.get(this.id))
      self.validSelected()
    })
  },

  doSniff: function(){
    this.reset()
    var pathsToSniff = [BABB.PlatformsConfig.defaultPlatformsPath]
    Sniffer.stopSniff(pathsToSniff)
    Sniffer.sniff(pathsToSniff, this.onSniffed)
  },

  reset : function(){    
    this.itemsCollection.reset()
    this.setSelected(null)
  },
  
  onSniffed : function(parReport){
	if(parReport.isUpdate){
      this.doSniff()
    }else{
      for(locSniffedPath in parReport){
        var locSniffedFilesArray = parReport[locSniffedPath]

        for(var i in locSniffedFilesArray){
          var locFileName = locSniffedFilesArray[i]
          var pathNormalized = Path.join(locSniffedPath,locFileName)
          pathNormalized = Path.normalize(pathNormalized)
          if(Fs.existsSync(pathNormalized+'/platform.js')){
            var platform = new Platform({path : pathNormalized})            
            this.itemsCollection.add(platform)
          }
        }
      }
      if(!this.getSelected()){
        this.selectNext()
      }
    }
  },
  
  onSelectedChange : function (iItem){
    this.$el.children('.focus').removeClass('focus')
    if(iItem){
      this.temporaryFocusContainer()

      //highlight
      $('#'+iItem.id).addClass('focus')

      //change CSS
      var oldCSSPlatform = $('#CSS-Platform')
      oldCSSPlatform.attr('href', '')
      var platformCSSPath = Path.normalize(iItem.get('path')+"/style.css")
      if(Fs.existsSync(platformCSSPath)){
        oldCSSPlatform.attr('href', platformCSSPath)
      }

      //change dynabody
      var dynabody = $('#dynabody')
      if(iItem.isAvailable()){
        dynabody.removeClass('unavailable')
      }else{
        dynabody.addClass('unavailable')
      }      
      dynabody.children().remove()
      var self = this
      var platformDynaBodyPath = Path.normalize(iItem.get('path')+"/layout.html")
      if(Fs.existsSync(platformDynaBodyPath)){
        dynabody.load(encodeURI(platformDynaBodyPath), function(){
          self.trigger('dynabodyLoaded')
        })        
      }
    }
    
    this.trigger('selectionChanged', iItem)
  },

  toString : function(){
    return 'PlatformsCollectionView'
  }

})

exports.Platform = Platform
exports.PlatformsCollection = PlatformsCollection
exports.PlatformsCollectionView = PlatformsCollectionView
