var $ = global.$
var Backbone = global.Backbone
var _ = global._

exports.ItemsCollectionView = Backbone.View.extend({
   
  doBindings : function(){
    _.bindAll(this, 'render')
    _.bindAll(this, 'onSniffed')
    _.bindAll(this, 'onSelectedChange')
    _.bindAll(this, 'onSelected')
    _.bindAll(this, 'temporaryFocusContainer')
    
    this.itemsToRender = []
    this.itemsCollection.bind('change', this.render)
    this.itemsCollection.bind('add', _.throttle(this.render,100))
    this.itemsCollection.bind('remove', this.render)
    this.itemsCollection.bind('reset', this.render)
    this.$el.bind("mousemove", _.throttle(this.temporaryFocusContainer,100))
    this.$el.on("click", function(event){
      event.stopPropagation()
    })    
  },
  
  temporaryFocusContainer : function(){
    clearTimeout(this.lastFocusOnContainerTimeoutId)
    this.$el.addClass('focus')
    var self = this
    this.lastFocusOnContainerTimeoutId = setTimeout(function(){
      self.$el.removeClass('focus')
    },3000)
    
  },
  
  onSelected : function(iItem){
  },

  unfocusContainer : function(){
    clearTimeout(this.lastFocusOnContainerTimeoutId)
    this.$el.removeClass('focus')
  },
  
  getSelected: function(){
    return this.selectedItem
  },
  
  setSelected : function(iItem){    
    var changed = (this.selectedItem != iItem)
    if(changed){
      this.selectedItem = iItem
      this.render()
      this.onSelectedChange(iItem)      
    }        
    this.onSelected(iItem)
  },
  
  selectNext : function(){
    var next = null
    if(this.selectedItem == null){
      next = this.itemsCollection.first()
    }else{
      var indexSelected = this.itemsCollection.indexOf(this.selectedItem)
      next = this.itemsCollection.at( this.getNextIndex(indexSelected) )
    }
    if(next){
      this.setSelected(next)
    }
  },

  selectPrevious : function(){
    var previous = null
    if(this.selectedItem == null){
      previous = this.itemsCollection.first()
    }else{
      var indexSelected = this.itemsCollection.indexOf(this.selectedItem)
      previous = this.itemsCollection.at( this.getPreviousIndex(indexSelected) )
    }
    if(previous){
      this.setSelected(previous)
    }
  },
  
  getNextIndex : function(baseIndex){
    return (baseIndex + 1) % this.itemsCollection.size()
  },
  
  getPreviousIndex : function(baseIndex){
    return (baseIndex + this.itemsCollection.size() - 1) % this.itemsCollection.size() 
  },  
  
  validSelected : function(){
    this.trigger('selectionValidated', this.selectedItem)
  },

  back:function(){    
    this.trigger('back')
  },
  
  updateItemsToRender: function(){
    this.itemsToRender = []
    
    var indexSelected = this.itemsCollection.indexOf(this.selectedItem)
    if(indexSelected == -1){
      return
    }
    
    var startIndex = indexSelected    
    
    var locNbItemsToRender = Math.min(
      this.itemsCollection.size(), 
      global.BABB.GlobalConfig.maxItemsToRender
    )
    //rewind    
    // var halfRenderSize = Math.round ((locNbItemsToRender -1)/2)
    
    // for(var i = 0; i < halfRenderSize; i++){
      // startIndex = this.getPreviousIndex(startIndex)
    // }
    
    for(var i = 0; i < locNbItemsToRender; i++ ){
      var locItem = this.itemsCollection.at(startIndex)
      if(locItem){
        this.itemsToRender.push(locItem)
      }
      startIndex = this.getNextIndex(startIndex)
    }
  },
  
  render : function() {
    console.log('call to '+this.toString()+' render')
    this.updateItemsToRender()  
    var renderedContent = this.template({collection : this.itemsToRender})
    $(this.$el).html(renderedContent)
    
    //ugly workarround for async 
    this.onSelectedChange(this.getSelected())
    return this
  }
})