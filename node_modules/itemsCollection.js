var $ = global.$
var Backbone = global.Backbone
var _ = global._

exports.ItemsCollectionView = Backbone.View.extend({
  
  doBindings : function(){
    _.bindAll(this, 'render')
    _.bindAll(this, 'onSniffed')
    _.bindAll(this, 'onSelectedChange')
    _.bindAll(this, 'temporaryFocusContainer')
    
    this.itemsCollection.bind('change', _.throttle(this.render,100))
    this.itemsCollection.bind('add', _.throttle(this.render,100))
    this.itemsCollection.bind('remove', _.throttle(this.render,100))
    this.itemsCollection.bind('reset', _.throttle(this.render,100))
    this.$el.bind("mousemove", this.temporaryFocusContainer)
    this.$el.on("click", function(event){
      event.stopPropagation()
    })
  },
  
  temporaryFocusContainer : function(){
    clearTimeout(this.lastFocusOnContainerTimeoutId)
    this.$el.addClass('focus')
    var self = this
    this.lastFocusOnContainerTimeoutId = setTimeout(function(){
      self.$el.removeClass('focus')
    },1000)
  },

  unfocusContainer : function(){
    clearTimeout(this.lastFocusOnContainerTimeoutId)
    this.$el.removeClass('focus')
  },
  
  getSelected: function(){
    return this.selectedItem
  },
  
  setSelected : function(iItem){
    var changed = (this.selectedItem != iItem)
    if(changed){
      this.selectedItem = iItem
      this.onSelectedChange(iItem)
    }
  },
  
  selectNext : function(){
    var next = null
    if(this.selectedItem == null){
      next = this.itemsCollection.first()
    }else{
      var indexSelected = this.itemsCollection.indexOf(this.selectedItem)
      next = this.itemsCollection.at((indexSelected + 1) % this.itemsCollection.size() )
    }
    if(next){
      this.setSelected(next)
    }
  },

  selectPrevious : function(){
    var previous = null
    if(this.selectedItem == null){
      previous = this.itemsCollection.first()
    }else{
      var indexSelected = this.itemsCollection.indexOf(this.selectedItem)
      previous = this.itemsCollection.at((indexSelected + this.itemsCollection.size() - 1) % this.itemsCollection.size() )
    }
    if(previous){
      this.setSelected(previous)
    }
  },
  
  validSelected : function(){
    this.trigger('selectionValidated', this.selectedItem)
  },

  back:function(){    
    this.trigger('back')
  },
  
  render : function() {
    console.log('call to '+this.toString()+' render')
    var renderedContent = this.template({collection : this.itemsCollection.toArray()})
    $(this.$el).html(renderedContent)

    return this
  }
})